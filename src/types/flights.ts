// Generated by https://quicktype.io

export type SearchFlight = {
	search_id: string;
	data: Datum[];
	connections: any[];
	time: number;
	currency: string;
	currency_rate: number;
	fx_rate: number;
	refresh: any[];
	del: number;
	ref_tasks: any[];
	search_params: SearchParams;
	all_stopover_airports: any[];
	all_airlines: any[];
};

export type Datum = {
	id: string;
	dTime: number;
	dTimeUTC: number;
	aTime: number;
	aTimeUTC: number;
	nightsInDest: null;
	duration: Duration;
	fly_duration: string;
	flyFrom: CityCodeFrom;
	cityFrom: CityFrom;
	cityCodeFrom: CityCodeFrom;
	countryFrom: Country;
	mapIdfrom: MapIdfrom;
	flyTo: CityCodeFrom;
	cityTo: CityTo;
	cityCodeTo: CityCodeFrom;
	countryTo: Country;
	mapIdto: MapIdto;
	distance: number;
	routes: Array<CityCodeFrom[]>;
	airlines: string[];
	pnr_count: number;
	has_airport_change: boolean;
	technical_stops: number;
	price: number;
	bags_price: { [key: string]: number };
	baglimit: Baglimit;
	availability: Availability;
	facilitated_booking_available: boolean;
	conversion: Conversion;
	quality: number;
	booking_token: string;
	deep_link: string;
	tracking_pixel: null;
	p1: number;
	p2: number;
	p3: number;
	transfers: any[];
	type_flights: FoundOn[];
	virtual_interlining: boolean;
	found_on: FoundOn[];
	route: Route[];
};

export type Availability = {
	seats: number | null;
};

export type Baglimit = {
	hand_width?: number;
	hand_height?: number;
	hand_length?: number;
	hand_weight?: number;
	hold_width: number;
	hold_height: number;
	hold_length: number;
	hold_dimensions_sum: number;
	hold_weight: number;
};

export enum CityCodeFrom {
	Ams = 'AMS',
	Bud = 'BUD',
}

export enum CityFrom {
	Amsterdam = 'Amsterdam',
}

export enum CityTo {
	Budapest = 'Budapest',
}

export type Conversion = {
	EUR: number;
};

export type Country = {
	code: Code;
	name: Name;
};

export enum Code {
	Hu = 'HU',
	Nl = 'NL',
}

export enum Name {
	Hungary = 'Hungary',
	Netherlands = 'Netherlands',
}

export type Duration = {
	departure: number;
	return: number;
	total: number;
};

export enum FoundOn {
	Deprecated = 'deprecated',
}

export enum MapIdfrom {
	AmsterdamNl = 'amsterdam_nl',
}

export enum MapIdto {
	BudapestHu = 'budapest_hu',
}

export type Route = {
	fare_basis: string;
	fare_category: FareCategory;
	fare_classes: string;
	price: number;
	fare_family: string;
	found_on: FoundOn;
	last_seen: number;
	refresh_timestamp: number;
	source: FoundOn;
	return: number;
	bags_recheck_required: boolean;
	guarantee: boolean;
	id: string;
	combination_id: string;
	original_return: number;
	aTime: number;
	dTime: number;
	aTimeUTC: number;
	dTimeUTC: number;
	mapIdfrom: string;
	mapIdto: string;
	cityTo: string;
	cityFrom: string;
	cityCodeFrom: string;
	cityCodeTo: string;
	flyTo: string;
	flyFrom: string;
	airline: string;
	operating_carrier: string;
	equipment: null | string;
	latFrom: number;
	lngFrom: number;
	latTo: number;
	lngTo: number;
	flight_no: number;
	vehicle_type: VehicleType;
	operating_flight_no: string;
};

export enum FareCategory {
	M = 'M',
}

export enum VehicleType {
	Aircraft = 'aircraft',
}

export type SearchParams = {
	flyFrom_type: string;
	to_type: string;
	seats: Seats;
};

export type Seats = {
	passengers: number;
	adults: number;
	children: number;
	infants: number;
};
